//one version
class PhoneDirectory {
public:
    /** Initialize your data structure here
        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */
    PhoneDirectory(int maxNumbers) {
        upbnd = maxNumbers - 1;
        used.resize(maxNumbers + 1, false);
        dict.resize(maxNumbers + 1);
         fnt = rear = 0;
        for(int i = 0; i < maxNumbers; ++ i)
            dict[rear ++] = i;
    }
    
    /** Provide a number which is not assigned to anyone.
        @return - Return an available number. Return -1 if none is available. */
    int get() {
        if(fnt >= rear)
            return -1;
        int res = dict[fnt ++];
        used[res] = true;
        return res;
    }
    
    /** Check if a number is available or not. */
    bool check(int number) {
        if(number < 0 || number > upbnd)
            return false;
        return !used[number];
    }
    
    /** Recycle or release a number. */
    void release(int number) {
        if(number >= 0 && number <= upbnd && used[number]){
            used[number] = false;
            dict[-- fnt] = number;
        }
    }
private:
    vector<int> dict;
    vector<bool> used;
    int upbnd, fnt, rear;
};
//the other
class PhoneDirectory {
public:
    vector<int> pool; // stores all the available nubmers
    vector<bool> used; // whether a number is used
    int p; // pointing to the start position of unused numbers 
    int max_num;
    /** Initialize your data structure here
        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */
    PhoneDirectory(int maxNumbers):max_num(maxNumbers), pool(maxNumbers), used(maxNumbers,false),p(0) {
        for(int i=0;i<max_num;i++)
            pool[i] = i;
    }
    
    /** Provide a number which is not assigned to anyone.
        @return - Return an available number. Return -1 if none is available. */
    int get() {
        if(p == max_num)
            return -1;
        
        int res = pool[p++];
        used[res] = true;
        return res;
    }
    
    /** Check if a number is available or not. */
    bool check(int number) {
       return number>=0 && number < max_num && !used[number];
    }
    
    /** Recycle or release a number. */
    void release(int number) {
       if(number>=0 && number<max_num && used[number]) {
           used[number] = false;
           pool[--p] = number;
       }
    }
};
//java
 Set<Integer> used = new HashSet<Integer>();
    Queue<Integer> available = new LinkedList<Integer>();
    int max;
    public PhoneDirectory(int maxNumbers) {
        max = maxNumbers;
        for (int i = 0; i < maxNumbers; i++) {
            available.offer(i);
        }
    }
    
    public int get() {
        Integer ret = available.poll();
        if (ret == null) {
            return -1;
        }
        used.add(ret);
        return ret;
    }
    
    public boolean check(int number) {
        if (number >= max || number < 0) {
            return false;
        }
        return !used.contains(number);
    }
    
    public void release(int number) {
        if (used.remove(number)) {
            available.offer(number);
        }
    }